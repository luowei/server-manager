name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        TAG=${{ github.ref_name }}
        VERSION=${TAG#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/server-manager:${{ steps.version.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/server-manager:latest
        labels: |
          org.opencontainers.image.title=Server Manager
          org.opencontainers.image.description=基于FastAPI的Web应用，提供局域网唤醒(WOL)和定时任务管理功能
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.release.published_at }}
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ github.event.release.published_at }}
          VERSION=${{ steps.version.outputs.version }}
          REVISION=${{ github.sha }}

  create-manifest:
    needs: docker-release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create deployment manifest
      run: |
        mkdir -p release
        cat > release/docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          server-manager:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/server-manager:${{ github.ref_name }}
            container_name: server-manager
            restart: unless-stopped
            network_mode: host
            cap_add:
              - NET_RAW
            environment:
              - SM_PORT=8000
              - TZ=Asia/Shanghai
              - SM_ENV=production
            volumes:
              - server-manager-data:/app/data
              - server-manager-logs:/app/logs
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/api/status"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 30s

        volumes:
          server-manager-data:
            driver: local
          server-manager-logs:
            driver: local
        EOF

        cat > release/docker-run.sh << 'EOF'
        #!/bin/bash
        # Server Manager - Docker 运行脚本
        # 版本: ${{ github.ref_name }}

        # 配置变量
        IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/server-manager:${{ github.ref_name }}"
        CONTAINER_NAME="server-manager"
        HOST_PORT=8000

        # 停止并删除旧容器
        if [ "$(docker ps -aq -f name=${CONTAINER_NAME})" ]; then
            echo "停止并删除现有容器..."
            docker stop ${CONTAINER_NAME}
            docker rm ${CONTAINER_NAME}
        fi

        # 拉取最新镜像
        echo "拉取镜像 ${IMAGE}..."
        docker pull ${IMAGE}

        # 启动新容器
        echo "启动容器..."
        docker run -d \
          --name ${CONTAINER_NAME} \
          --restart unless-stopped \
          --network host \
          --cap-add NET_RAW \
          -e SM_PORT=${HOST_PORT} \
          -e TZ=Asia/Shanghai \
          -e SM_ENV=production \
          -v server-manager-data:/app/data \
          -v server-manager-logs:/app/logs \
          ${IMAGE}

        echo "容器启动完成！"
        echo "访问地址: http://localhost:${HOST_PORT}"
        echo "查看日志: docker logs -f ${CONTAINER_NAME}"
        EOF

        chmod +x release/docker-run.sh

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: release/docker-compose.yml
        asset_name: docker-compose.yml
        asset_content_type: text/yaml

    - name: Upload run script
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: release/docker-run.sh
        asset_name: docker-run.sh
        asset_content_type: text/plain